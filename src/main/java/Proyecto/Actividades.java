/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Proyecto;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import javax.swing.Icon;
/**
 *
 * @author Warwin02
 */
public class Actividades extends javax.swing.JFrame  implements CRUD{

    private FileInputStream fis;
    private int longitudBytes;
    Conexion cx,cx2,cx3,cx4;
    
    public Actividades() {
        initComponents();
        this.setSize(791, 561);
        this.setLocationRelativeTo(null);
        this.setTitle("Servicios");
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        IDColonia = new javax.swing.JLabel();
        TxtColonia = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Visor = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        TxtFechaHora = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtObservacion = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        LblFoto = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listServicio = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listCuadrilla = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        MBuscar = new javax.swing.JMenu();
        MAgregar = new javax.swing.JMenu();
        MEditar = new javax.swing.JMenu();
        MBorrar = new javax.swing.JMenu();
        MLimpiar = new javax.swing.JMenu();
        MRegresar = new javax.swing.JMenu();
        MSalir = new javax.swing.JMenu();

        jMenu3.setText("jMenu3");

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servicios");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("ID_Servicio");

        IDColonia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        IDColonia.setText("ID_Colonia");

        jButton1.setText("Consultar Colonias");

        Visor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(Visor);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Fecha/Hora");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Observaciones");

        TxtObservacion.setColumns(20);
        TxtObservacion.setRows(5);
        jScrollPane2.setViewportView(TxtObservacion);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Click en el recuadro ");

        LblFoto.setFont(new java.awt.Font("Comic Sans MS", 3, 36)); // NOI18N
        LblFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblFoto.setText("Foto");
        LblFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        LblFoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LblFotoMouseClicked(evt);
            }
        });

        listServicio.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1", "2", "3", "4", "5", "6", "7" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listServicio);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 3, 14)); // NOI18N
        jLabel3.setText("para agregar la imagen:");

        jLabel2.setText("Contamos con 1523 colonias puedes consultar en el boton para");

        jLabel5.setText(" asegurar que la informacion sea la correcta");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("ID_Cuadrilla");

        listCuadrilla.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1", "2", "3", "4", "5", "6" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listCuadrilla);

        MBuscar.setText("Buscar");
        MBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MBuscarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MBuscar);

        MAgregar.setText("Agregar");
        MAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MAgregarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MAgregar);

        MEditar.setText("Editar");
        MEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MEditarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MEditar);

        MBorrar.setText("Borrar");
        MBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MBorrarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MBorrar);

        MLimpiar.setText("Limpiar");
        MLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MLimpiarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MLimpiar);

        MRegresar.setText("Regresar");
        MRegresar.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                MRegresarMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        MRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MRegresarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MRegresar);

        MSalir.setText("Salir");
        MSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(MSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(IDColonia)
                        .addGap(18, 18, 18)
                        .addComponent(TxtColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(TxtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4)
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel7)))
                                .addGap(96, 96, 96))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(TxtFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 26, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(143, 143, 143)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IDColonia)
                            .addComponent(TxtColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MBuscarMouseClicked
        Buscar();
    }//GEN-LAST:event_MBuscarMouseClicked

    private void LblFotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblFotoMouseClicked
        // TODO add your handling code here:
        JFileChooser se = new JFileChooser();
        se.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int estado = se.showOpenDialog(null);
        if (estado == JFileChooser.APPROVE_OPTION){
            try{
                fis = new FileInputStream(se.getSelectedFile());
                this.longitudBytes = (int) se.getSelectedFile().length();
                Image icono = ImageIO.read(se.getSelectedFile()).getScaledInstance(LblFoto.getWidth(), LblFoto.getHeight(), Image.SCALE_DEFAULT);
                LblFoto.setIcon(new ImageIcon(icono));
                LblFoto.updateUI();
                
            }catch(FileNotFoundException e){
                e.printStackTrace();
                System.out.println("Error en el primer catch");
            }catch(IOException e){
                e.printStackTrace();
                System.out.println("Error en el Segundo catch");
            }
        }
            
    }//GEN-LAST:event_LblFotoMouseClicked

    private void MAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MAgregarMouseClicked
        // TODO add your handling code here:
        Agregar();
    }//GEN-LAST:event_MAgregarMouseClicked

    private void MEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MEditarMouseClicked
        // TODO add your handling code here:
        Editar();
    }//GEN-LAST:event_MEditarMouseClicked

    private void MBorrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MBorrarMouseClicked
        // TODO add your handling code here:
        Borrar();
    }//GEN-LAST:event_MBorrarMouseClicked

    private void MRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MRegresarMouseClicked
        // TODO add your handling code here:
        Inicio i = new Inicio();
        i.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MRegresarMouseClicked

    private void MSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MSalirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_MSalirMouseClicked

    private void MLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MLimpiarMouseClicked
        // TODO add your handling code here:
        Limpiar();
    }//GEN-LAST:event_MLimpiarMouseClicked

    private void MRegresarMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_MRegresarMenuKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_MRegresarMenuKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Actividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Actividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Actividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Actividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Actividades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IDColonia;
    private javax.swing.JLabel LblFoto;
    private javax.swing.JMenu MAgregar;
    private javax.swing.JMenu MBorrar;
    private javax.swing.JMenu MBuscar;
    private javax.swing.JMenu MEditar;
    private javax.swing.JMenu MLimpiar;
    private javax.swing.JMenu MRegresar;
    private javax.swing.JMenu MSalir;
    private javax.swing.JTextField TxtColonia;
    private javax.swing.JTextField TxtFechaHora;
    private javax.swing.JTextArea TxtObservacion;
    private javax.swing.JTable Visor;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> listCuadrilla;
    private javax.swing.JList<String> listServicio;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Agregar() {
        if (listServicio.getSelectedValue().equals("") || TxtFechaHora.getText().equals("") ||  TxtObservacion.getText().equals("") || TxtColonia.getText().equals("") || listCuadrilla.getSelectedValue().equals("")){
          JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
        }else{
          int Servicio, Colonia, Cuadrilla;    
          String FechaHora,Observaciones;
          
        // Definir el formato de fecha y hora que esperas
         FechaHora=TxtFechaHora.getText().trim();
         
        // Definir el formato de fecha que esperas
        
        
         Servicio=Integer.parseInt(listServicio.getSelectedValue());
         Colonia=Integer.parseInt(TxtColonia.getText().trim());
         Observaciones = TxtObservacion.getText().trim();
         Cuadrilla=Integer.parseInt(listCuadrilla.getSelectedValue());
            
         try{
             
             cx=new Conexion("proyecto2");
             Connection cn=cx.Conectar();
             PreparedStatement pst = cn.prepareStatement("insert into limpieza values (?,?,?,?,?,?)");
             pst.setInt(1,Servicio);
             pst.setInt(2, Colonia);
             pst.setInt(3, Cuadrilla);
             pst.setString(4, FechaHora);
             pst.setString(5, Observaciones);
             pst.setBlob(6, fis, longitudBytes);
             
             pst.executeUpdate();
             cn.close();
             JOptionPane.showMessageDialog(null, "El registro fue insertado con exito");
             Limpiar();
             
         }catch(SQLException e){
             System.out.println("error al guardar" + e);
             JOptionPane.showMessageDialog(null, "Errores en la inserccion!!");
         }
        
        }
    }
    @Override
    public void Buscar() {
        if(listServicio.getSelectedValue().equals("") || TxtColonia.getText().equals("") || listCuadrilla.getSelectedValue().equals("")){
            JOptionPane.showMessageDialog(null, "Debes seleccionar un servicio ,insertar una colonia y seleccionar una cuadrilla");
        }else{
            
            try{
               String id_s = "";
               String id_c = "";
               String id_cu = "";
               
               id_s = listServicio.getSelectedValue();
               id_c = TxtColonia.getText().trim();
               id_cu = listCuadrilla.getSelectedValue();
               //parseo
               int Servicio,Colonia,Cuadrilla;
               
               Servicio = Integer.parseInt(id_s);
               Colonia = Integer.parseInt(id_c);
               Cuadrilla = Integer.parseInt(id_cu);
               
               cx2= new Conexion("Proyecto2");
               Connection cn2=cx2.Conectar();
               PreparedStatement pst = cn2.prepareStatement("select * from limpieza where ID_SERVICIO = '" + Servicio + "' AND ID_COLONIAS = '" + Colonia + "' AND ID_CUADRILLA = '" + Cuadrilla + "'");
               ResultSet rs = pst.executeQuery();
               
               if(rs.next()){
                   //Datos consultados
                   TxtFechaHora.setText(rs.getString("FECHA_HORA_LIMPIEZA"));
                   TxtObservacion.setText(rs.getString("OBSERVACIONES"));
                   //Leer el binario
                   Blob blob = rs.getBlob(5);
                   //Pasar el binario a imagen
                   byte[] data = blob.getBytes(1, (int) blob.length());
                   //lee la imagen
                   BufferedImage img = null;
                   try{
                       img = ImageIO.read(new ByteArrayInputStream(data));
                   }catch (IOException e){
                       System.out.println("error en la consulta" + e);
                   }
                   ImageIcon icono = new ImageIcon(img);
                   Icon imagen = new ImageIcon(icono.getImage().getScaledInstance(LblFoto.getWidth(), LblFoto.getHeight(), Image.SCALE_DEFAULT));
                   LblFoto.setIcon(imagen);
                   cn2.close();
               }
                                              
            }catch (SQLException ex){
              JOptionPane.showMessageDialog(null, "Error al obtener el registro!!");
              System.out.println("error al obtener el registro: " + ex);
            }
            
        }    
    }

    @Override
    public void Editar() {
          if (listServicio.getSelectedValue().equals("") || TxtColonia.getText().equals("") || listCuadrilla.getSelectedValue().equals("")) {
        JOptionPane.showMessageDialog(null, "Debes seleccionar un servicio, insertar una colonia y seleccionar una cuadrilla");
    } else {
        try {
            String id_s = listServicio.getSelectedValue();
            String id_c = TxtColonia.getText().trim();
            String id_cu = listCuadrilla.getSelectedValue();
            
            // Parseo de valores
            int Servicio = Integer.parseInt(id_s);
            int Colonia = Integer.parseInt(id_c);
            int Cuadrilla = Integer.parseInt(id_cu);
            
            // Realizar la conexión y la consulta
            cx3 = new Conexion("Proyecto2");
            Connection cn3 = cx3.Conectar();
            PreparedStatement pst = cn3.prepareStatement("UPDATE limpieza SET FECHA_HORA_LIMPIEZA = ?, OBSERVACIONES = ?, IMAGEN = ? WHERE ID_SERVICIO = ? AND ID_COLONIAS = ? AND ID_CUADRILLA = ?");
            
            // Asignar valores a los parámetros
            pst.setString(1, TxtFechaHora.getText().trim());
            pst.setString(2, TxtObservacion.getText().trim());
            pst.setBlob(3, fis, longitudBytes); // Asegúrate de tener definidos estos valores antes
            
            pst.setInt(4, Servicio);
            pst.setInt(5, Colonia);
            pst.setInt(6, Cuadrilla);
            
            // Ejecutar la actualización
            int rowsAffected = pst.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registro actualizado con éxito");
                Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro");
            }
            
            cn3.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
            System.out.println("Error al actualizar el registro: " + ex);
        }
    }
    }

    @Override
    public void Borrar() {
     if (listServicio.getSelectedValue().equals("") || TxtColonia.getText().equals("") || listCuadrilla.getSelectedValue().equals("")) {
        JOptionPane.showMessageDialog(null, "Debes seleccionar un servicio, insertar una colonia y seleccionar una cuadrilla");
    } else {
        try {
            String id_s = listServicio.getSelectedValue();
            String id_c = TxtColonia.getText().trim();
            String id_cu = listCuadrilla.getSelectedValue();
            
            // Parseo de valores
            int Servicio = Integer.parseInt(id_s);
            int Colonia = Integer.parseInt(id_c);
            int Cuadrilla = Integer.parseInt(id_cu);
            
            // Realizar la conexión y la consulta
            cx4 = new Conexion("Proyecto2");
            Connection cn4 = cx4.Conectar();
            PreparedStatement pst = cn4.prepareStatement("DELETE FROM limpieza WHERE ID_SERVICIO = ? AND ID_COLONIAS = ? AND ID_CUADRILLA = ?");
            
            // Asignar valores a los parámetros
            pst.setInt(1, Servicio);
            pst.setInt(2, Colonia);
            pst.setInt(3, Cuadrilla);
            
            // Ejecutar la eliminación
            int rowsAffected = pst.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registro eliminado con éxito");
                Limpiar(); // Si deseas limpiar los campos después de eliminar el registro
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el registro para eliminar");
            }
            
            cn4.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro");
            System.out.println("Error al eliminar el registro: " + ex);
        }
    }
    }

    @Override
    public void Limpiar() {
        listServicio.clearSelection();
        TxtFechaHora.setText("");
        TxtColonia.setText("");
        TxtObservacion.setText("");
        LblFoto.setText("Foto");
        LblFoto.setIcon(null);
    }
}
