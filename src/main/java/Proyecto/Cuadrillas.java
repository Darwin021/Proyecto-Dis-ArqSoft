/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Proyecto;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Warwin02
 */
public class Cuadrillas extends javax.swing.JFrame implements CRUD {

    /**
     * Creates new form Cuadrillas
     */
    Conexion cx;
    
    public Cuadrillas() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Cuadrillas");
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        txtCuadrilla = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPersonal = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        txtNCuadrilla = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        MBuscar = new javax.swing.JMenu();
        MAgregar = new javax.swing.JMenu();
        MEditar = new javax.swing.JMenu();
        MBorrar = new javax.swing.JMenu();
        MLimpiar = new javax.swing.JMenu();
        MRegresar = new javax.swing.JMenu();
        MSalir = new javax.swing.JMenu();

        jMenu4.setText("jMenu4");

        jMenu6.setText("jMenu6");

        jMenu9.setText("File");
        jMenuBar2.add(jMenu9);

        jMenu10.setText("Edit");
        jMenuBar2.add(jMenu10);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID_Cuadrilla");

        jLabel2.setText("ID_Personal");

        listPersonal.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "16", "18", "19", "20", "21", "22", "23", "24", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listPersonal);

        jLabel3.setText("N_Cuadrilla");

        txtNCuadrilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNCuadrillaActionPerformed(evt);
            }
        });

        jLabel4.setText("Descripcion");

        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        jScrollPane3.setViewportView(txtDescripcion);

        MBuscar.setText("Buscar");
        MBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MBuscarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MBuscar);

        MAgregar.setText("Agregar");
        MAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MAgregarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MAgregar);

        MEditar.setText("Editar");
        MEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MEditarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MEditar);

        MBorrar.setText("Borrar");
        MBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MBorrarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MBorrar);

        MLimpiar.setText("Limpiar");
        MLimpiar.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
                MLimpiarMenuCanceled(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(MLimpiar);

        MRegresar.setText("Regresar");
        MRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MRegresarMouseClicked(evt);
            }
        });
        jMenuBar1.add(MRegresar);

        MSalir.setText("Salir");
        MSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(MSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNCuadrilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNCuadrillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNCuadrillaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNCuadrillaActionPerformed

    private void MBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MBuscarMouseClicked
        // TODO add your handling code here:
        Buscar();
    }//GEN-LAST:event_MBuscarMouseClicked

    private void MAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MAgregarMouseClicked
        // TODO add your handling code here:
        Agregar();
    }//GEN-LAST:event_MAgregarMouseClicked

    private void MEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MEditarMouseClicked
        // TODO add your handling code here:
        Editar();
    }//GEN-LAST:event_MEditarMouseClicked

    private void MBorrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MBorrarMouseClicked
        // TODO add your handling code here:\
        Borrar();
    }//GEN-LAST:event_MBorrarMouseClicked

    private void MLimpiarMenuCanceled(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MLimpiarMenuCanceled
        // TODO add your handling code here:
        Limpiar();
    }//GEN-LAST:event_MLimpiarMenuCanceled

    private void MRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MRegresarMouseClicked
        // TODO add your handling code here:
        Inicio i = new Inicio();
        i.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MRegresarMouseClicked

    private void MSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MSalirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_MSalirMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cuadrillas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cuadrillas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cuadrillas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cuadrillas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cuadrillas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MAgregar;
    private javax.swing.JMenu MBorrar;
    private javax.swing.JMenu MBuscar;
    private javax.swing.JMenu MEditar;
    private javax.swing.JMenu MLimpiar;
    private javax.swing.JMenu MRegresar;
    private javax.swing.JMenu MSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listPersonal;
    private javax.swing.JTextField txtCuadrilla;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtNCuadrilla;
    // End of variables declaration//GEN-END:variables

    @Override
    public void Agregar() {
        if (txtCuadrilla.getText().equals("") || listPersonal.getSelectedValue().equals("") ||  txtNCuadrilla.getText().equals("") || txtDescripcion.getText().equals("")){
          JOptionPane.showMessageDialog(null, "Debes llenar todos los campos");
        }else{
          int Cuadrilla, Personal, NCuadrilla;    
          String Descripcion;
          
        
        
         Cuadrilla= Integer.parseInt(txtCuadrilla.getText().trim());
         Personal= Integer.parseInt(listPersonal.getSelectedValue());
         NCuadrilla = Integer.parseInt(txtNCuadrilla.getText().trim());
         Descripcion= txtDescripcion.getText();
            
         try{
             
             cx=new Conexion("proyecto2");
             Connection cn=cx.Conectar();
             PreparedStatement pst = cn.prepareStatement("insert into cuadrlla values (?,?,?,?)");
             pst.setInt(1,Cuadrilla);
             pst.setInt(2,Personal);
             pst.setInt(3,NCuadrilla);
             pst.setString(4,Descripcion);
             
             
             pst.executeUpdate();
             cn.close();
             JOptionPane.showMessageDialog(null, "El registro fue insertado con exito");
             Limpiar();
             
         }catch(SQLException e){
             System.out.println("error al guardar" + e);
             JOptionPane.showMessageDialog(null, "Errores en la inserccion!!");
         }
        
        }
    }

    @Override
    public void Buscar() {
         if (txtCuadrilla.getText().isEmpty() || listPersonal.getSelectedValue() == null) {
    JOptionPane.showMessageDialog(null, "Debes ingresar el ID de cuadrilla y seleccionar un personal");
    return;
}

try {
    int idCuadrilla = Integer.parseInt(txtCuadrilla.getText().trim());
    int idPersonal = Integer.parseInt(listPersonal.getSelectedValue().toString());
    
    cx = new Conexion("proyecto2");
    Connection cn = cx.Conectar();
    
    PreparedStatement pst = cn.prepareStatement("SELECT * FROM cuadrlla WHERE ID_CUADRILLA = ? AND ID_PERSONAL = ?");
    pst.setInt(1, idCuadrilla);
    pst.setInt(2, idPersonal);
    
    ResultSet rs = pst.executeQuery();
    
    if (rs.next()) {
        // Si se encontró el registro, mostrar los datos en los campos correspondientes
        txtNCuadrilla.setText(rs.getString("NO_CUADRILLA"));
        txtDescripcion.setText(rs.getString("DESCRPICION_CUA"));
    } else {
        JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID de personal proporcionado");
    }
    
    cn.close();
} catch (SQLException e) {
    System.out.println("Error al buscar el registro: " + e);
    JOptionPane.showMessageDialog(null, "Error al buscar el registro");
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "El ID de cuadrilla y el ID de personal deben ser números enteros");
}
    }

    @Override
    public void Editar() {
            if (txtCuadrilla.getText().isEmpty() || listPersonal.getSelectedValue() == null) {
        JOptionPane.showMessageDialog(null, "Debes ingresar el ID de cuadrilla y seleccionar un personal");
        return;
    }
    
    try {
        int idCuadrilla = Integer.parseInt(txtCuadrilla.getText().trim());
        int idPersonal = Integer.parseInt(listPersonal.getSelectedValue().toString());
        
        cx = new Conexion("proyecto2");
        Connection cn = cx.Conectar();
        
        PreparedStatement pst = cn.prepareStatement("UPDATE cuadrlla SET NO_CUADRILLA = ?, DESCRPICION_CUA = ? WHERE ID_CUADRILLA = ? AND ID_PERSONAL = ?");
        pst.setString(1, txtNCuadrilla.getText().trim());
        pst.setString(2, txtDescripcion.getText().trim());
        pst.setInt(3, idCuadrilla);
        pst.setInt(4, idPersonal);
        
        int rowsAffected = pst.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Registro de cuadrilla actualizado con éxito");
            Limpiar(); // Limpia los campos después de la operación exitosa
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el registro de cuadrilla");
        }
        
        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al editar el registro de cuadrilla: " + e);
        JOptionPane.showMessageDialog(null, "Error al editar el registro de cuadrilla");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID de cuadrilla y el ID de personal deben ser números enteros");
    }
    }

    @Override
    public void Borrar() {
        if (txtCuadrilla.getText().isEmpty() || listPersonal.getSelectedValue() == null) {
        JOptionPane.showMessageDialog(null, "Debes ingresar el ID de cuadrilla y seleccionar un personal");
        return;
    }
    
    try {
        int idCuadrilla = Integer.parseInt(txtCuadrilla.getText().trim());
        int idPersonal = Integer.parseInt(listPersonal.getSelectedValue().toString());
        
        cx = new Conexion("proyecto2");
        Connection cn = cx.Conectar();
        
        PreparedStatement pst = cn.prepareStatement("DELETE FROM cuadrlla WHERE ID_CUADRILLA = ? AND ID_PERSONAL = ?");
        pst.setInt(1, idCuadrilla);
        pst.setInt(2, idPersonal);
        
        int rowsAffected = pst.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Registro de cuadrilla eliminado con éxito");
            Limpiar(); // Limpia los campos después de la operación exitosa
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ningún registro de cuadrilla con los IDs proporcionados");
        }
        
        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al borrar el registro de cuadrilla: " + e);
        JOptionPane.showMessageDialog(null, "Error al borrar el registro de cuadrilla");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "El ID de cuadrilla y el ID de personal deben ser números enteros");
    }
    }

    @Override
    public void Limpiar() {
        // Limpiar campos de texto
    txtCuadrilla.setText("");
    txtNCuadrilla.setText("");
    txtDescripcion.setText("");
    
    // Limpiar lista de personal seleccionado
    listPersonal.clearSelection();
    }
}
